generator client {
  provider = "prisma-client-js" // Specifies the Prisma client for interacting with the database
}

datasource db {
  provider = "postgresql" // Specifies PostgreSQL as the database provider
  url      = env("DATABASE_URL") // Uses an environment variable for the database connection URL
}

/// Users table stores details about lenders and admins.
model Users {
  userId       String    @id @default(uuid()) // Unique identifier for each user
  name         String    @db.VarChar(255) // User's name with a max length of 255 characters
  email        String    @unique @db.VarChar(255) // Unique email for user authentication
  phoneNumber  String    @unique @db.VarChar(15) // Unique phone number for verification
  passwordHash String // Hashed password for security
  role         Role      @default(LENDER) // User role (Admin or Lender), defaulting to Lender
  createdAt    DateTime  @default(now()) // Timestamp when the user is created
  updatedAt    DateTime  @updatedAt // Timestamp automatically updated when a record is modified
  deletedAt    DateTime? // Soft delete functionality (null if active)

  // Relationships
  loansIssued         Loans[] // Loans issued by this user (Lender)
  repaymentsCollected Repayments[] // Repayments collected by this user
  financialReports    FinancialSummary[] // Monthly financial reports related to this user
  capitalTracking     CapitalTracking[] // Tracks capital status for this user
  paymentDayLogs      PaymentDayLog[]
  RiskThreshold       RiskThreshold?

  @@index([name]) // Index on name to speed up searches
}

/// Enum defining roles for users in the system.
enum Role {
  ADMIN // Has higher privileges, including managing lenders
  LENDER // Issues loans and collects repayments
}

/// Borrowers table stores details of borrowers who take loans.
model Borrowers {
  borrowerId   String   @id @default(uuid()) // Unique identifier for each borrower
  name         String   @db.VarChar(255) // Borrower's name
  passwordHash String   @db.VarChar(255) // Hashed password for security
  phoneNumber  String   @unique @db.VarChar(15) // Unique phone number
  address      String // Physical address of the borrower
  createdAt    DateTime @default(now()) // Timestamp when the borrower is registered
  updatedAt    DateTime @updatedAt // Timestamp automatically updated on modification

  // Relationships
  loansTaken       Loans[] // Loans taken by this borrower
  repaymentsMade   Repayments[] // Repayments made by this borrower
  riskAssessment   RiskAssessment? // Risk assessment score for this borrower
  RepaymentHistory RepaymentHistory[]

  @@index([name]) // Index on name to improve query performance
}

/// Loans table stores details of issued loans.
model Loans {
  loanId                String     @id @default(uuid()) // Unique identifier for each loan
  borrowerId            String // References the borrower who took the loan
  issuedById            String // References the lender who issued the loan
  principalAmount       Decimal    @db.Decimal(10, 2) // Original loan amount
  upfrontDeductedAmount Decimal    @db.Decimal(10, 2) // Deducted amount at the time of loan issuance
  dueDate               DateTime? // Due date of the loan
  dailyRepaymentAmount  Decimal    @db.Decimal(10, 2) // Amount to be repaid daily
  pendingAmount         Decimal    @default(0.00) @db.Decimal(10, 2) // Ensure non-negative value
  daysToRepay           String[] // Tracks missed/due payment days for analysis
  status                LoanStatus @default(Active) // Current status of the loan
  isMigrated            Boolean    @default(false)
  issuedAt              DateTime   @default(now()) // Timestamp when the loan was issued
  closedAt              DateTime? // Timestamp when the loan was closed (if applicable)

  // Relationships
  repayments Repayments[] // Repayments made towards this loan
  lender     Users        @relation(fields: [issuedById], references: [userId]) // Lender issuing the loan
  borrower   Borrowers    @relation(fields: [borrowerId], references: [borrowerId]) // Borrower taking the loan
}

/// Enum representing different statuses a loan can have.
enum LoanStatus {
  Active // Loan is active and being repaid
  Closed // Loan has been fully repaid
  Defaulted // Loan is overdue and has missed payments
}

/// Repayments table stores details of repayments made by borrowers.
model Repayments {
  repaymentId String          @id @default(uuid())
  loanId      String
  borrowerId  String
  collectedBy String
  dueDate     DateTime
  paidDate    DateTime? // Initially null, updated when paid
  amountToPay Decimal         @db.Decimal(10, 2)
  amountPaid  Decimal         @default(0.00) @db.Decimal(10, 2) // Default 0
  status      RepaymentStatus @default(Unpaid)
  isPending   Boolean         @default(true)
  createdAt   DateTime        @default(now())

  // Relationships
  collectedByUser Users     @relation(fields: [collectedBy], references: [userId])
  loan            Loans     @relation(fields: [loanId], references: [loanId], onDelete: Cascade)
  borrower        Borrowers @relation(fields: [borrowerId], references: [borrowerId])
}

/// Enum representing different statuses of repayments.
enum RepaymentStatus {
  Paid // Repayment was successfully made
  Unpaid // Repayment is still due
  Missed // Repayment was missed
  Paid_Late // Repayment was made after the due date
  Paid_in_Advance // Repayment was made before the due date
  Paid_Partial_Late // Partial repayment was made
  Paid_Partial_Advance // Partial repayment was made in advance
  Paid_Partial // Partial repayment was made
}

/// RiskAssessment table calculates and stores risk scores for borrowers.
model RiskAssessment {
  id                 String    @id @default(uuid())
  borrowerId         String    @unique
  totalLoansTaken    Int
  totalRepayments    Int
  missedRepayments   Int
  latePayments       Int
  defaultedLoans     Int
  completedLoans     Int
  onTimePayments     Int
  repaymentRate      Float
  averageDelayInDays Float
  riskScore          Int
  riskLevel          RiskLevel
  lastEvaluatedAt    DateTime  @default(now())

  borrower Borrowers @relation(fields: [borrowerId], references: [borrowerId])
}

/// Enum defining different risk levels for borrowers.
enum RiskLevel {
  Low_Risk // Borrower has a good repayment record
  Moderate_Risk // Borrower has occasional missed payments
  High_Risk // Borrower frequently misses payments
}

model RiskThreshold {
  id              String @id @default(uuid())
  userId          String @unique
  lowThreshold    Int    @default(70)
  mediumThreshold Int    @default(40)
  user            Users  @relation(fields: [userId], references: [userId])
}

/// FinancialSummary table stores monthly financial reports.
model FinancialSummary {
  id     String @id @default(uuid())
  userId String
  month  String // Format: "YYYY-MM" (e.g., "2025-06")

  totalLoansIssued       Int
  totalPrincipalLent     Decimal @db.Decimal(10, 2)
  totalUpfrontDeductions Decimal @db.Decimal(10, 2)

  newBorrowersThisMonth Int

  activeLoansCount    Int
  closedLoansCount    Int
  defaultedLoansCount Int

  pendingLoanAmount Decimal @db.Decimal(10, 2)
  totalCapital      Decimal @db.Decimal(10, 2)
  idleCapital       Decimal @db.Decimal(10, 2)

  updatedAt DateTime @updatedAt

  // Relation
  user Users @relation(fields: [userId], references: [userId])

  @@unique([userId, month])
  @@index([userId, month])
}

model RepaymentHistory {
  id         String   @id @default(uuid())
  borrowerId String
  name       String
  amountPaid Decimal  @db.Decimal(10, 2)
  paidDate   DateTime
  createdAt  DateTime @default(now()) // Timestamp when the record was created

  borrower Borrowers @relation(fields: [borrowerId], references: [borrowerId])
}

model CapitalTracking {
  id                   String   @id @default(uuid())
  userId               String // References lender
  date                 DateTime @unique // Tracks capital status on a specific date
  totalCapital         Decimal  @db.Decimal(12, 2) // Total capital (pending loans + idle capital)
  idleCapital          Decimal  @db.Decimal(12, 2) // Capital available for lending
  pendingLoanAmount    Decimal  @db.Decimal(12, 2) // Total pending loan amount
  amountCollectedToday Decimal? @db.Decimal(12, 2) // Amount collected from repayments today

  user Users @relation(fields: [userId], references: [userId]) // Links to lender
}

model PaymentDayLog {
  id        String   @id @default(uuid())
  userId    String
  date      DateTime
  createdAt DateTime @default(now())
  users     Users?   @relation(fields: [userId], references: [userId])

  @@unique([userId, date]) // Prevent multiple entries per day per user
}
